// <auto-generated />
using System;
using Data.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ClassifiedAds")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.DominLayer.Blogs.BlogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogPostId")
                        .HasColumnType("integer");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BlogComment", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Blogs.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowComments")
                        .HasColumnType("boolean");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BodyOverview")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IncludeInSitemap")
                        .HasColumnType("boolean");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDateUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BlogPost", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Blogs.BlogPostTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogPostCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BlogPostTag", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowCustomersToSelectPageSize")
                        .HasColumnType("boolean");

                    b.Property<int>("CategoryTemplateId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IncludeInTopMenu")
                        .HasColumnType("boolean");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManuallyPriceRange")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageSize")
                        .HasColumnType("integer");

                    b.Property<string>("PageSizeOptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("PictureId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceFrom")
                        .HasColumnType("numeric");

                    b.Property<bool>("PriceRangeFiltering")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PriceTo")
                        .HasColumnType("numeric");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("boolean");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryTemplateId");

                    b.ToTable("Category", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.CategoryTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoryTemplate", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowCustomersToSelectPageSize")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManuallyPriceRange")
                        .HasColumnType("boolean");

                    b.Property<int>("ManufacturerTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageSize")
                        .HasColumnType("integer");

                    b.Property<string>("PageSizeOptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PictureId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceFrom")
                        .HasColumnType("numeric");

                    b.Property<bool>("PriceRangeFiltering")
                        .HasColumnType("boolean");

                    b.Property<decimal>("PriceTo")
                        .HasColumnType("numeric");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdditionalShippingCharge")
                        .HasColumnType("numeric");

                    b.Property<string>("AdminComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("AllowAddingOnlyExistingAttributeCombinations")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowBackInStockSubscriptions")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowCustomerReviews")
                        .HasColumnType("boolean");

                    b.Property<string>("AllowedQuantities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ApprovedRatingSum")
                        .HasColumnType("integer");

                    b.Property<int>("ApprovedTotalReviews")
                        .HasColumnType("integer");

                    b.Property<bool>("AutomaticallyAddRequiredProducts")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AvailableEndDateTimeUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("AvailableForPreOrder")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AvailableStartDateTimeUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BackorderModeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("BasepriceAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BasepriceBaseAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("BasepriceBaseUnitId")
                        .HasColumnType("integer");

                    b.Property<bool>("BasepriceEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("BasepriceUnitId")
                        .HasColumnType("integer");

                    b.Property<bool>("CallForPrice")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("CustomerEntersPrice")
                        .HasColumnType("boolean");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("DeliveryDateId")
                        .HasColumnType("integer");

                    b.Property<bool>("DisableBuyButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisableWishlistButton")
                        .HasColumnType("boolean");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("DisplayStockAvailability")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisplayStockQuantity")
                        .HasColumnType("boolean");

                    b.Property<int>("DownloadActivationType")
                        .HasColumnType("integer");

                    b.Property<int>("DownloadActivationTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DownloadExpirationDays")
                        .HasColumnType("integer");

                    b.Property<int>("DownloadId")
                        .HasColumnType("integer");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GiftCardType")
                        .HasColumnType("integer");

                    b.Property<int>("GiftCardTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Gtin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasDiscountsApplied")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSampleDownload")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasTierPrices")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasUserAgreement")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDownload")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreeShipping")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGiftCard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRental")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShipEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTelecommunicationsOrBroadcastingOrElectronicServices")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("boolean");

                    b.Property<int>("LowStockActivityId")
                        .HasColumnType("integer");

                    b.Property<int>("ManageInventoryMethodId")
                        .HasColumnType("integer");

                    b.Property<string>("ManufacturerPartNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("MarkAsNew")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("MarkAsNewEndDateTimeUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("MarkAsNewStartDateTimeUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MaxNumberOfDownloads")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaximumCustomerEnteredPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MinStockQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinimumCustomerEnteredPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NotApprovedRatingSum")
                        .HasColumnType("integer");

                    b.Property<int>("NotApprovedTotalReviews")
                        .HasColumnType("integer");

                    b.Property<bool>("NotReturnable")
                        .HasColumnType("boolean");

                    b.Property<int>("NotifyAdminForQuantityBelow")
                        .HasColumnType("integer");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("OrderMaximumQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("OrderMinimumQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("OverriddenGiftCardAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("ParentGroupedProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PreOrderAvailabilityStartDateTimeUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductAvailabilityRangeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ProductCost")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<int>("RecurringCycleLength")
                        .HasColumnType("integer");

                    b.Property<int>("RecurringCyclePeriod")
                        .HasColumnType("integer");

                    b.Property<int>("RecurringCyclePeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("RecurringTotalCycles")
                        .HasColumnType("integer");

                    b.Property<int>("RentalPriceLength")
                        .HasColumnType("integer");

                    b.Property<int>("RentalPricePeriod")
                        .HasColumnType("integer");

                    b.Property<int>("RentalPricePeriodId")
                        .HasColumnType("integer");

                    b.Property<bool>("RequireOtherProducts")
                        .HasColumnType("boolean");

                    b.Property<string>("RequiredProductIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SampleDownloadId")
                        .HasColumnType("integer");

                    b.Property<bool>("ShipSeparately")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("boolean");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("boolean");

                    b.Property<int>("TaxCategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("UnlimitedDownloads")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("UseMultipleWarehouses")
                        .HasColumnType("boolean");

                    b.Property<string>("UserAgreementText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.Property<bool>("VisibleIndividually")
                        .HasColumnType("boolean");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Product", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductAttribute", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductAttributeCombination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowOutOfStockOrders")
                        .HasColumnType("boolean");

                    b.Property<string>("AttributesXml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gtin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManufacturerPartNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MinStockQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("NotifyAdminForQuantityBelow")
                        .HasColumnType("integer");

                    b.Property<decimal?>("OverriddenPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("PictureId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeCombination", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductAttributeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeControlType")
                        .HasColumnType("integer");

                    b.Property<int>("AttributeControlTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ConditionAttributeXml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("TextPrompt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ValidationFileAllowedExtensions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ValidationFileMaximumSize")
                        .HasColumnType("integer");

                    b.Property<int?>("ValidationMaxLength")
                        .HasColumnType("integer");

                    b.Property<int?>("ValidationMinLength")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeMapping", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssociatedProductId")
                        .HasColumnType("integer");

                    b.Property<int>("AttributeValueType")
                        .HasColumnType("integer");

                    b.Property<int>("AttributeValueTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ColorSquaresRgb")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<bool>("CustomerEntersQty")
                        .HasColumnType("boolean");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("ImageSquaresPictureId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PictureId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceAdjustment")
                        .HasColumnType("numeric");

                    b.Property<bool>("PriceAdjustmentUsePercentage")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductAttributeMappingId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("WeightAdjustment")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributeValue", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFeaturedProduct")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFeaturedProduct")
                        .HasColumnType("boolean");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductManufacturer", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("PictureId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPicture", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("CustomerNotifiedOfReply")
                        .HasColumnType("boolean");

                    b.Property<int>("HelpfulNoTotal")
                        .HasColumnType("integer");

                    b.Property<int>("HelpfulYesTotal")
                        .HasColumnType("integer");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReplyText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReview", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductSpecificationAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowFiltering")
                        .HasColumnType("boolean");

                    b.Property<int>("AttributeTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowOnProductPage")
                        .HasColumnType("boolean");

                    b.Property<int>("SpecificationAttributeOptionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSpecificationAttribute", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTag", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ReviewType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("VisibleToAllCustomers")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ReviewType", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Common.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomAttributes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StateProvinceId")
                        .HasColumnType("integer");

                    b.Property<string>("ZipPostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Customers.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AdminComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CannotLoginUntilDateUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmailToRevalidate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasShoppingCartItems")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActivityDateUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastIpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginDateUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("RegisteredInStoreId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Customers.CustomerAddressMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddressMapping", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Customers.ExternalAuthenticationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalDisplayIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OAuthAccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OAuthToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ExternalAuthenticationRecord", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Media.Download", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("DownloadBinary")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid>("DownloadGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseDownloadUrl")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Download", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Media.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AltAttribute")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeoFilename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleAttribute")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VirtualPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Picture", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Media.PictureBinary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("BinaryData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("PictureId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PictureBinary", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Setting", "ClassifiedAds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", "ClassifiedAds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("CustomerRoleClaims", "ClassifiedAds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerClaims", "ClassifiedAds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerLogins", "ClassifiedAds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("CustomerRoles", "ClassifiedAds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("CustomerTokens", "ClassifiedAds");
                });

            modelBuilder.Entity("Core.DominLayer.Blogs.BlogComment", b =>
                {
                    b.HasOne("Core.DominLayer.Blogs.BlogPost", "BlogPost")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DominLayer.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.Category", b =>
                {
                    b.HasOne("Core.DominLayer.Catalog.CategoryTemplate", "CategoryTemplate")
                        .WithMany()
                        .HasForeignKey("CategoryTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryTemplate");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductAttributeCombination", b =>
                {
                    b.HasOne("Core.DominLayer.Catalog.Product", null)
                        .WithMany("ProductAttributeCombinations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductAttributeMapping", b =>
                {
                    b.HasOne("Core.DominLayer.Catalog.Product", null)
                        .WithMany("ProductAttributeMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductCategory", b =>
                {
                    b.HasOne("Core.DominLayer.Catalog.Product", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductManufacturer", b =>
                {
                    b.HasOne("Core.DominLayer.Catalog.Product", null)
                        .WithMany("ProductManufacturers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductPicture", b =>
                {
                    b.HasOne("Core.DominLayer.Catalog.Product", null)
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductReview", b =>
                {
                    b.HasOne("Core.DominLayer.Catalog.Product", null)
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductSpecificationAttribute", b =>
                {
                    b.HasOne("Core.DominLayer.Catalog.Product", null)
                        .WithMany("ProductSpecificationAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.ProductTag", b =>
                {
                    b.HasOne("Core.DominLayer.Catalog.Product", null)
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Core.DominLayer.Customers.CustomerAddressMapping", b =>
                {
                    b.HasOne("Core.DominLayer.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Core.DominLayer.Customers.ExternalAuthenticationRecord", b =>
                {
                    b.HasOne("Core.DominLayer.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.DominLayer.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.DominLayer.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.DominLayer.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.DominLayer.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DominLayer.Blogs.BlogPost", b =>
                {
                    b.Navigation("BlogComments");
                });

            modelBuilder.Entity("Core.DominLayer.Catalog.Product", b =>
                {
                    b.Navigation("ProductAttributeCombinations");

                    b.Navigation("ProductAttributeMappings");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductManufacturers");

                    b.Navigation("ProductPictures");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductSpecificationAttributes");

                    b.Navigation("ProductTags");
                });
#pragma warning restore 612, 618
        }
    }
}
